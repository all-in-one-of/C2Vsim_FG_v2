typeof(FF[1:3])
typeof(FF[1])
typeof(FF[[1]])
typeof(FF[[2]])
typeof(FF[[1:2]])
typeof(FF[1:2])
typeof(FF[1:2])
typeof(FF[1])
typeof(FF[[1])
typeof(FF[[1]])
FF$height
FF[c("name", "rand")]
length(FF)
test.test <- 250
print(x)
print(test.test)
y = "Hello World"
"Hello World" -> z
z
x
test.test
c <-TRUE
i <- 123L
n <-1.23
c <- "ABC 123"
d <- as.Date("2001-02-03")
d
typeof(d)
l
c
i
n
d
f <- function(x){x+1}
f(2)
v <- c(1,2,3)
v
v[1]
v[[1]]
s <- 1:5
s
m <- matrix(data = 1:6,nrow=2,ncol=3)
m
a <- array(data = 1:8, dim=c(2,2,2))
a
a[0]
a[1]
a[4]
a[1][1][1]
a[1][1][2]
View(a,"a")
l <- lest (TRUE, 123L, 2.34, "abc")
l <- list (TRUE, 123L, 2.34, "abc")
l
l[1]
l[2]
categ <- c("Male","Female","Male","Male")
fctr <- factor(categ)
fctr
levels(fctr)
unclass(fctr)
unclass(fctr) -> t
t
t[1]
t[2]
t[3]
df <- data.frame(
Name = c("cat", "Dog", "Cow,", "Pig"),
HowMany = c(5, 10, 15, 20),
isPet = c(TRUE, TRUE, FALSE, FALSE)
)
df
view(df)
View(df,"df")
df[1,2]
df[1,1]
df[1, ]
df[2, ]
df$Name
df$HowMany
df[c(2,4),]
df[2:4,]
df[df$isPet == TRUE]
df[df$isPet == TRUE, ]
df[df$HowMany >= 15, ]
df[df$Name %in% "cat", ]
1_2
1+2
c(1,2,3)+c(2,4,6)
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
m
n <- matrix(1:6, 2,3)
n
m==n
require('sf')
identical(m,n)
install.packages("dplyr")
library("dplyr")
?View
exit
q()
load("FaceData.RData")
View(elemArea)
sum(elemArea)
1000^2
sum(elemArea)/(1000^2)
setwd(getwd())
load("FaceData.RData")
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
GW_BDGinfo <- h5file(name =  paste0(results_path, "C2VSimFG_GW_ZBudget.hdf"), mode = "r")
hfileGroups <- list.groups(GW_BDGinfo)
hfileDataSets <- list.datasets(GW_BDGinfo)
cnvrt <- 1233.48
DeepPerc <- GW_BDGinfo[hfileDataSets[24]]
Vflow <- array(dim = c(dim(DeepPerc)[2], dim(DeepPerc)[1], 4))
for (i in 1:dim(DeepPerc)[1]) {
Vflow[,i,1] <- DeepPerc[i,]*cnvrt
}
# The vertical flows are written per node.
# Read the vertical flows
ids <- c(46, 73, 100)
vertflowNodes <- array(dim = c(dim(XY)[1], 504, length(ids)))
for (i in 1:length(ids)) {
Vertflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(Vertflow)[1]) {
vertflowNodes[,j,i] <- Vertflow[j,]
}
}
# First we have to find out how many element share each node
NsharedElem <- vector(mode = "integer", length = dim(XY)[1])
for(i in 1:dim(XY)[1]){
elemlist = which(MSH[c(-1,-6)] == i, arr.ind = TRUE)
NsharedElem[i] <- dim(elemlist)[1]
}
# For each element we will add the vertical flows of the nodes divided by the number of elements each node is connected
for (i in 1:dim(MSH)[1]) {
velemflow <- matrix(data = 0, nrow = 504, ncol = 3)
for(j in 2:5){
if (MSH[i,j] == 0)
break
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
}
for(j in 1:3){
Vflow[i,,j] <- velemflow[,j]*cnvrt
}
}
## Read the faceflows
hflow <- array(dim = c(dim(FcLm)[1], 504, 4))
ids <- c(28, 55, 82, 109)
for (i in 1:length(ids)) {
tempfflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(tempfflow)[1]) {
hflow[,j,i] <- tempfflow[j,]*cnvrt
}
}
for (i in 1:dim(Vflow)[2]) {
for (j in 1:dim(Vflow)[3]) {
Vflow[,i,j] <- Vflow[,i,j]/elemArea
}
}
for (i in 1:dim(hflow)[2]) {
for (j in 1:dim(hflow)[3]) {
hflow[,i,j] <- hflow[,i,j]/faceArea[,j]
}
}
dim(Vflow)
plot(Vflow[10000,,1])
plot(Vflow[10000,,1]/30)
dim(DeepPerc)
plot(DeepPerc[,1])
DeepPerc[1,1]
DeepPerc[15000,1]
DeepPerc[1,15000]
plot(DeepPerc[,15000])
plot(DeepPerc[300,15000])
DeepPerc[300,15000]
elemArea[15000]
DeepPerc[300,15000]/elemArea[15000]
plot(DeepPerc[,15000]/elemArea[15000])
plot(vflow[15000,,1])
plot(Vflow[15000,,1])
plot(DeepPerc[,15000]/elemArea[15000])
plot(Vflow[15000,,4])
Vflow[15000,,4]
setwd(getwd())
load("FaceData.RData")
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
GW_BDGinfo <- h5file(name =  paste0(results_path, "C2VSimFG_GW_ZBudget.hdf"), mode = "r")
hfileGroups <- list.groups(GW_BDGinfo)
hfileDataSets <- list.datasets(GW_BDGinfo)
cnvrt<-1
DeepPerc <- GW_BDGinfo[hfileDataSets[24]]
Vflow <- array(dim = c(dim(DeepPerc)[2], dim(DeepPerc)[1], 4))
for (i in 1:dim(DeepPerc)[1]) {
Vflow[,i,1] <- DeepPerc[i,]*cnvrt
}
plot(DeepPerc[,15000])
plot(Vflow[15000,,1])
# Deep percolation
# Assume that the units are AC.FT /month
# 1 ACFT -> 1233.48 m^3
cnvrt <- 1233.48
DeepPerc <- GW_BDGinfo[hfileDataSets[24]]
Vflow <- array(dim = c(dim(DeepPerc)[2], dim(DeepPerc)[1], 4))
for (i in 1:dim(DeepPerc)[1]) {
Vflow[,i,1] <- DeepPerc[i,]*cnvrt
}
plot(DeepPerc[,15000])
plot(Vflow[15000,,1])
# The vertical flows are written per node.
# Read the vertical flows
ids <- c(46, 73, 100)
vertflowNodes <- array(dim = c(dim(XY)[1], 504, length(ids)))
for (i in 1:length(ids)) {
Vertflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(Vertflow)[1]) {
vertflowNodes[,j,i] <- Vertflow[j,]
}
}
NsharedElem <- vector(mode = "integer", length = dim(XY)[1])
for(i in 1:dim(XY)[1]){
elemlist = which(MSH[c(-1,-6)] == i, arr.ind = TRUE)
NsharedElem[i] <- dim(elemlist)[1]
}
for (i in 1:dim(MSH)[1]) {
velemflow <- matrix(data = 0, nrow = 504, ncol = 3)
for(j in 2:5){
if (MSH[i,j] == 0)
break
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
}
for(j in 1:3){
Vflow[i,,j+1] <- velemflow[,j]*cnvrt
}
}
hflow <- array(dim = c(dim(FcLm)[1], 504, 4))
ids <- c(28, 55, 82, 109)
for (i in 1:length(ids)) {
tempfflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(tempfflow)[1]) {
hflow[,j,i] <- tempfflow[j,]*cnvrt
}
}
for (i in 1:dim(Vflow)[2]) {
for (j in 1:dim(Vflow)[3]) {
Vflow[,i,j] <- Vflow[,i,j]/elemArea
}
}
plot(Vflow[15000,,1])
plot(Vflow[15000,,1]/30)
DeepPerc[1,15000]
DeepPerc[1,15000]/elemArea[15000]
DeepPerc[1,15000]*cnvrt/elemArea[15000]
(DeepPerc[1,15000]*cnvrt)/elemArea[15000]
(DeepPerc[1,15000]*cnvrt)/elemArea[15000]/30
# Divide the horizontal flows with the face areas
for (i in 1:dim(hflow)[2]) {
for (j in 1:dim(hflow)[3]) {
hflow[,i,j] <- hflow[,i,j]/faceArea[,j]
}
}
plot(hflow[1500,,1])
plot(hflow[15000,,1])
View(faceIndex)
hf <- h5file(name = "test.h5", mode = "w")
hf["flowdata/VFLOW"] <- Vflow
h5close(hf)
pwd()
pwd()
wd()
cd()
pwd()
library(pracma)
pwd()
# Set as current directory the directory where this script is run
setwd(getwd())
pwd()
getwd()
# Set as current directory the directory where this script is run
setwd('f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/Rwrkspc/')
pwd
pwd()
hf <- h5file(name = "test.h5", mode = "w")
hf["flowdata/VFLOW"] <- Vflow
h5close(hf)
hf <- h5file(name = "test.h5", mode = "w")
hf["flowdata/VFLOW"] <- Vflow
hf["flowdata/HFLOW"] <- hflow
hf["geodata/XY"] <- XY
hf["geodata/MSH"] <- MSH
hf["geodata/STRAT"] <- strat
hf["geodata/FI"] <- faceIndex
h5close(hf)
View(XY[-1,])
View(XY)
View(XY[,-1])
t<- matrix(data = XY[,-1], nrow = dim(XY)[1], ncol = dim(XY)[2])
t<- matrix(data = XY[,-1], nrow = dim(XY)[1], ncol = dim(XY)[2]-1)
View(t)
View(t)
dim(XY)[1]
XYmat = matrix(nrow = dim(XY)[1], ncol = 2)
XYmat[,1] = XY$X
XYmat[,2] = XY$Y
View(XYmat)
View(strat)
XYmat <- matrix(nrow = dim(XY)[1], ncol = 2)
XYmat[,1] <- XY$X
XYmat[,2] <- XY$Y
MSHmat <- matrix(nrow = dim(MSH)[1], ncol = 5)
MSHmat[,1] <- MSH$nd1
MSHmat[,2] <- MSH$nd2
MSHmat[,3] <- MSH$nd3
MSHmat[,4] <- MSH$nd4
MSHmat[,5] <- MSH$S
STRATmat <- matrix(nrow = dim(strat)[1], ncol = 5)
STRATmat[,1] <- strat$GSE
STRATmat[,2] <- strat$L1
STRATmat[,3] <- strat$L2
STRATmat[,4] <- strat$L3
STRATmat[,5] <- strat$L4
hf <- h5file(name = "test.h5", mode = "w")
hf["flowdata/VFLOW"] <- Vflow
hf["flowdata/HFLOW"] <- hflow
hf["geodata/XY"] <- XYmat
hf["geodata/MSH"] <- MSHmat
hf["geodata/STRAT"] <- STRATmat
hf["geodata/FI"] <- faceIndex
h5close(hf)
hf <- h5file(name = "test.h5", mode = "w")
hf["flowdata/VFLOW"] <- Vflow
hf["flowdata/HFLOW"] <- hflow
hf["geodata/XY"] <- XYmat
hf["geodata/MSH"] <- MSHmat
hf["geodata/STRAT"] <- STRATmat
hf["geodata/FI"] <- faceIndex
hf["geodata/FCEL"] <- FcLm
h5close(hf)
hf <- h5file(name = "PartTrackData.h5", mode = "w")
hf["flowdata/VFLOW"] <- Vflow
hf["flowdata/HFLOW"] <- hflow
hf["geodata/XY"] <- XYmat
hf["geodata/MSH"] <- MSHmat
hf["geodata/STRAT"] <- STRATmat
hf["geodata/FI"] <- faceIndex
hf["geodata/FCEL"] <- FcLm
h5close(hf)
# This script is used to extract and the flow field from any month
SimTime <- seq.Date(from = "1973/09/30",to = "2015/09/30",by = "month")
# This script is used to extract and the flow field from any month
SimTime <- seq.Date(from = as.Date("1973/09/30"),to = as.Date("2015/09/30"),by = "month")
# This script is used to extract and the flow field from any month
SimTime <- seq.Date(from = as.Date("1973/10/30"),to = as.Date("2015/09/30"),by = "month")
View(SimTime)
# This script is used to extract and the flow field from any month
simTime <- seq.Date(from = as.Date("1973/10/30"),to = as.Date("2015/09/30"),by = "month")
simTime[1]
months.Date(simTime[1])
months.Date(simTime[1]) ==10
months.Date(simTime[1],TRUE)
months.Date(simTime)
which(months.Date(simTime,TRUE)=="Oct")
which(months.Date(simTime,TRUE)=="Oct",arr.ind = TRUE)
simTime[1]
as.Date(simTime[1])
as.Date(simTime[1])
as.Date(simTime[1],'y')
as.Date(simTime[1],'y/m')
as.Date(simTime[1],'y/m/d')
as.Date(simTime[1],'m/d/y')
as.Date(simTime[1],'%m/%d/%y')
as.Date(simTime[1],"%m/%d/%y")
date()
date(simTime[1])
simTime[1]
typeof(simTime)
as.numeric(simTime[1])
as.Date.numeric(simTime[1])
simTime[1]
format(simTime[1],"%Y")
as.numeric(format(simTime[1],"%Y"))
as.numeric(format(simTime,"%Y"))
as.numeric(format(simTime,"%M"))
format(simTime,"%M")
format(simTime,"%m")
as.numeric(format(simTime,"%m"))
selectTimes <- which(as.numeric(format(simTime,"%Y")) > 2000 & as.numeric(format(simTime,"%m")) == 4)
hpart <- h5file(name =  "PartTrackData.h5", mode = "r")
hpartGroups <- list.groups(hpart)
hpartDataSets <- list.datasets(hpart)
View(hpartDataSets)
hpartDataSets[5]
XY <- hpart["/geodata/XY"]
View(XY)
XY[1,]
MSH <- hpart["/geodata/MSH"]
View(MSH)
MSH[100,]
dim(MSH)[1]
i1
i=1
x1 <- XY[MSH[i,1],1]
x1
x1 <- XY[MSH[i,1],1] y1 <- XY[MSH[i,1],2]
x1 <- XY[MSH[i,1],1]; y1 <- XY[MSH[i,1],2]
y1
x1
i=1
# Calculate element barycenters
cc = matrix(nrow = dim(MSH)[1], ncol = 2)
x1 <- XY[MSH[i,1],1]; y1 <- XY[MSH[i,1],2]
x2 <- XY[MSH[i,2],1]; y2 <- XY[MSH[i,2],2]
x3 <- XY[MSH[i,3],1]; y3 <- XY[MSH[i,3],2]
MSH[i,4] != 0
x4 <- XY[MSH[i,4],1]; y4 <- XY[MSH[i,4],2]
xv <- c(x1, x2, x3, x4)
yv <- c(y1, y2, y3, y4)
sum[xv]/length(xv)
sum(xv)/length(xv)
cc[i,] <- c(sum(xv)/length(xv), sum(yv)/length(yv))
View(cc)
cc = matrix(nrow = dim(MSH)[1], ncol = 2)
for (i in 1:dim(MSH)[1]) {
x1 <- XY[MSH[i,1],1]; y1 <- XY[MSH[i,1],2]
x2 <- XY[MSH[i,2],1]; y2 <- XY[MSH[i,2],2]
x3 <- XY[MSH[i,3],1]; y3 <- XY[MSH[i,3],2]
if (MSH[i,4] != 0){
x4 <- XY[MSH[i,4],1]; y4 <- XY[MSH[i,4],2]
xv <- c(x1, x2, x3, x4)
yv <- c(y1, y2, y3, y4)
}else{
xv <- c(x1, x2, x3)
yv <- c(y1, y2, y3)
}
cc[i,] <- c(sum(xv)/length(xv), sum(yv)/length(yv))
}
i
x1 <- MSH[,1]
View(x1)
x1 <- XY[MSH[,1],1]
x1 <- XY[MSH[,1],1]; y1 <- XY[MSH[,1],2]
x2 <- XY[MSH[,2],1]; y2 <- XY[MSH[,2],2]
x3 <- XY[MSH[,3],1]; y3 <- XY[MSH[,3],2]
x4 <- XY[MSH[,4],1]; y4 <- XY[MSH[,4],2]
quad_el = which(MSH[,4] != 0, arr.ind = TRUE)
tri_el = which(MSH[,4] == 0, arr.ind = TRUE)
View(tri_el)
tri_el = which(MSH[,4] == 0, arr.ind = FALSE)
x1 <- XY[MSH[quad_el,1],1]; y1 <- XY[MSH[quad_el,1],2]
x2 <- XY[MSH[quad_el,2],1]; y2 <- XY[MSH[quad_el,2],2]
x3 <- XY[MSH[quad_el,3],1]; y3 <- XY[MSH[quad_el,3],2]
x4 <- XY[MSH[quad_el,4],1]; y4 <- XY[MSH[quad_el,4],2]
cc[quad_el,1] <- (x1 + x2 + x3 +x4)/4
cc[quad_el,2] <- (y1 + y2 + y3 +y4)/4
# Calculate element barycenters
cc = matrix(nrow = dim(MSH)[1], ncol = 2)
# Calculate element barycenters
cc = matrix(data = 0, nrow = dim(MSH)[1], ncol = 2)
cc[quad_el,1] <- (x1 + x2 + x3 +x4)/4
cc[quad_el,2] <- (y1 + y2 + y3 +y4)/4
x1 <- XY[MSH[tri_el,1],1]; y1 <- XY[MSH[tri_el,1],2]
x2 <- XY[MSH[tri_el,2],1]; y2 <- XY[MSH[tri_el,2],2]
x3 <- XY[MSH[tri_el,3],1]; y3 <- XY[MSH[tri_el,3],2]
cc[tri_el,1] <- (x1 + x2 + x3)/4
cc[tri_el,2] <- (y1 + y2 + y3)/4
plot(cc[,1], cc[,2])
plot(cc[,1], cc[,2])
plot(cc)
cc = matrix(data = 0, nrow = dim(MSH)[1], ncol = 2)
quad_el = which(MSH[,4] != 0, arr.ind = FALSE)
tri_el = which(MSH[,4] == 0, arr.ind = FALSE)
x1 <- XY[MSH[quad_el,1],1]; y1 <- XY[MSH[quad_el,1],2]
x2 <- XY[MSH[quad_el,2],1]; y2 <- XY[MSH[quad_el,2],2]
x3 <- XY[MSH[quad_el,3],1]; y3 <- XY[MSH[quad_el,3],2]
x4 <- XY[MSH[quad_el,4],1]; y4 <- XY[MSH[quad_el,4],2]
cc[quad_el,1] <- (x1 + x2 + x3 +x4)/4
cc[quad_el,2] <- (y1 + y2 + y3 +y4)/4
x1 <- XY[MSH[tri_el,1],1]; y1 <- XY[MSH[tri_el,1],2]
x2 <- XY[MSH[tri_el,2],1]; y2 <- XY[MSH[tri_el,2],2]
x3 <- XY[MSH[tri_el,3],1]; y3 <- XY[MSH[tri_el,3],2]
cc[tri_el,1] <- (x1 + x2 + x3)/3
cc[tri_el,2] <- (y1 + y2 + y3)/3
plot(cc[,1], cc[,2])
# Calculate face centers and normals
FCEL <- hpart["/geodata/FCEL"]
View(FCEL)
FCEL[1,]
FCEL[2,]
FCEL[3,]
dim(FCEL)[1]
nrmls <- matrix(data = 0, nrow = dim(FCEL)[1], ncol = 4)
View(nrmls)
inner_fc <- which(FCEL[,1] !=0 & FCEL[,2] !=0)
outer_fc <- which(FCEL[,1] ==0 | FCEL[,2] ==0)
length(outer_fc)
length(inner_fc)
length(inner_fc)+1264
dim(FCEL)[1]
nrmls <- matrix(data = 0, nrow = dim(FCEL)[1], ncol = 4)
nrmls[inner_fc,1] <- ( cc[FCEL[inner_fc,1],1] + cc[FCEL[inner_fc,2],1] )/2
nrmls[inner_fc,2] <- ( cc[FCEL[inner_fc,1],2] + cc[FCEL[inner_fc,2],2] )/2
nrmls[1,]
dx <- cc[FCEL[inner_fc,2],1] - cc[FCEL[inner_fc,1],1]
dy <- cc[FCEL[inner_fc,2],2] - cc[FCEL[inner_fc,1],2]
ln <- sqrt(dx^2 + dy^2)
sqrt((dx/ln)^2 + (dy/ln)^2)
nrmls[inner_fc,3] <- dx/ln
nrmls[inner_fc,4] <- dy/ln
