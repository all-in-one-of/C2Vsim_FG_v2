View(myenv)
get("test.test",myenv)
myenv[["x"]]
myenv[["test.test"]]
10**2
34%%23
34%%34
34%%33
format(10^5, scientific = FALSE)
format(10^5, scientific = TRUE)
10%%3
10%%2
10%%3
10%/%3
12%%3
13%%3
10**5
11%%3
11%%5
11%%4
abs(4)
abs(-34)
log(2)
log10(2)
log(2,base = 10)
pi
options()
1/0
0/0
is.nan(0/0)
is.nan(0/1)
is.infinite(-1/0)
tr.tr < c(1 2 3 4)
tr.tr <- c(1 2 3 4)
tr.tr <- c(1, 2, 3, 4)
tr.tr[2]
length(tr.tr)
tr.tr[4]
tr.ts=3
m <- c(70L,80L)
m[1]
m[4] <- 50L
m[20] <- 70L
view(m)
viewer(m)
m
View(m,"test")
str <- c("mte", "wer","asd")
str(str)
view(str)
view(str,'test')
view(str,"test")
view(str,"test1")
str
s <- c("mte", "wer","asd")
view(s,"s")
view(s,"s")
View(m,"test")
View(s,"test")
view(s,"s")
view(s,"sss")
view(s, "sss")
View(s,"s")
view (s,"r")
View (s, "r")
is.numeric(m)
is.na(m)
v <- is.na(m)
sort(m)
mm <- sort(m)
v <- vector("numeric", length = 100)
View(v,"v")
sort.int(m,index.return = TRUE)
C = sort.int(m,index.return = TRUE)
View(C,"C")
C[["x"]]
C[["ix"]]
C[["ix"]][0]
C[["ix"]][1]
C[["ix"]][2]
C[["ix"]][1:3]
C[["ix"]][1:5]
vector(mode = numerical)
vector(mode = "numeric", length = 6)
vector(mode = "numeric", length = 6)*3
vector(mode = "numeric", length = 6)+3
vector(mode = "numeric", length = 6)+3 + C[["ix"]][1:4]
vector(mode = "numeric", length = 6)+3 + C[["ix"]][1:5]
vector(mode = "numeric", length = 6)+3 + C[["ix"]][1:6]
as.integer(vector(mode = "numeric", length = 6)+3 + C[["ix"]][1:6])
b <- as.integer(vector(mode = "numeric", length = 6)+3 + C[["ix"]][1:6])
factor(c("X","X","Y","Y","Z","X"))
f<-factor(c("X","X","Y","Y","Z","X"))
f
str(f)
View(f,"f")
f
find("X")
f.find("X")
f[1]
f[2]
f[1][1]
as.numeric(f)
as.integer(f)
f<-factor(c("X","X","Y","Y","Z","X")), levels("Z","Y","W","X")
f<-factor(c("X","X","Y","Y","Z","X")), levels("Z","Y","W","X"),
f<-factor(c("X","X","Y","Y","Z","X"), levels("Z","Y","W","X"))
F.name <- c("c","v","g","r")
F.rank <- c(1,2,4,3)
F[1]
list("name", 12L, 123.2, "rank")
FF<-list("name", 12L, 123.2, "rank")
View(FF)
str(FF)
FF<-list(name = "Giork", rand = 12L, height = 123.2, surname = "rank")
str(FF)
FF[1]
FF[2]
FF.name
FF[name]
View(FF)
View(FF)
FF[["name"]]
FF[1:2]
FF[1:3]
typeof(FF[1:3])
typeof(FF[1])
typeof(FF[[1]])
typeof(FF[[2]])
typeof(FF[[1:2]])
typeof(FF[1:2])
typeof(FF[1:2])
typeof(FF[1])
typeof(FF[[1])
typeof(FF[[1]])
FF$height
FF[c("name", "rand")]
length(FF)
test.test <- 250
print(x)
print(test.test)
y = "Hello World"
"Hello World" -> z
z
x
test.test
c <-TRUE
i <- 123L
n <-1.23
c <- "ABC 123"
d <- as.Date("2001-02-03")
d
typeof(d)
l
c
i
n
d
f <- function(x){x+1}
f(2)
v <- c(1,2,3)
v
v[1]
v[[1]]
s <- 1:5
s
m <- matrix(data = 1:6,nrow=2,ncol=3)
m
a <- array(data = 1:8, dim=c(2,2,2))
a
a[0]
a[1]
a[4]
a[1][1][1]
a[1][1][2]
View(a,"a")
l <- lest (TRUE, 123L, 2.34, "abc")
l <- list (TRUE, 123L, 2.34, "abc")
l
l[1]
l[2]
categ <- c("Male","Female","Male","Male")
fctr <- factor(categ)
fctr
levels(fctr)
unclass(fctr)
unclass(fctr) -> t
t
t[1]
t[2]
t[3]
df <- data.frame(
Name = c("cat", "Dog", "Cow,", "Pig"),
HowMany = c(5, 10, 15, 20),
isPet = c(TRUE, TRUE, FALSE, FALSE)
)
df
view(df)
View(df,"df")
df[1,2]
df[1,1]
df[1, ]
df[2, ]
df$Name
df$HowMany
df[c(2,4),]
df[2:4,]
df[df$isPet == TRUE]
df[df$isPet == TRUE, ]
df[df$HowMany >= 15, ]
df[df$Name %in% "cat", ]
1_2
1+2
c(1,2,3)+c(2,4,6)
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
m
n <- matrix(1:6, 2,3)
n
m==n
require('sf')
identical(m,n)
install.packages("dplyr")
library("dplyr")
?View
exit
q()
source('F:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/Rwrkspc/PreprocesInputs.R', echo=TRUE)
save(XY, MSH, strat, faceIndex, faceArea, FcLm, elemArea, file = "FaceData.RData")
pwd
pwd()
setwd(f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/Rwrkspc)
setwd("f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/Rwrkspc")
pwd()
save(XY, MSH, strat, faceIndex, faceArea, FcLm, elemArea, file = "FaceData.RData")
View(XY)
View(MSH)
View(strat)
View(faceIndex)
View(FcLm)
View(faceIndex)
View(faceArea)
dim(faceArea)
View(elemArea)
getwd()
setwd(getwd())
pwd()
# Set as current directory the directory where this script is run
setwd(getwd())
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
GW_BDGinfo <- h5file(name =  paste0(results_path, "C2VSimFG_GW_ZBudget.hdf"), mode = "r")
hfileGroups <- list.groups(GW_BDGinfo)
View(hfileGroups)
hfileDataSets <- list.datasets(GW_BDGinfo)
View(hfileDataSets)
# Deep percolation
DeepPerc <- GW_BDGinfo[hfileDataSets[24]]
View(DeepPerc)
DeepPerc[1,1]
DeepPerc[1,2]
DeepPerc[1,]
dim(DeepPerc[1,])
dim(DeepPerc[,1])
DeepPerc[,1]
dp <- DeepPerc[,1]
View(dp)
plot(dp)
plot(DeepPerc[,2])
plot(DeepPerc[,3])
plot(DeepPerc[,4])
plot(DeepPerc[,5])
plot(DeepPerc[,100])
plot(DeepPerc[,1000])
dim(DeepPerc)
dim(DeepPerc)[2]
Vflow = matrix(nrow = dim(DeepPerc)[2], ncol = dim(DeepPerc)[1])
Vflow = array(dim = c(dim(DeepPerc)[2], dim(DeepPerc)[1], 4))
dim(Vflow)
dim(DeepPerc[,1])
dim(DeepPerc[1,])
vector(DeepPerc[1,])
vector(DeepPerc[1,]mode = numeric)
vector(DeepPerc[1,], mode = "numeric")
vector(DeepPerc[1,], mode = "numeric")
vector(DeepPerc[1,], mode = "numeric", length = dim(DeepPerc[1,])[2])
i=1
Vflow[,i,1] <- DeepPerc[,i]
dim(Vflow[,i,1])
dim(Vflow)
dim(DeepPerc[,i])
Vflow[,i,1] <- DeepPerc[i,]
Vflow[1,1,1]
for (i in 1:dim(DeepPerc)[1]) {
Vflow[,i,1] <- DeepPerc[i,]
}
vflow[32537,504,1]
Vflow[1,1,1]
Vflow[32537,1,1]
Vflow[32537,504,1]
Vflow[32537,504,2]
for (i in c(46, 73, 100))
print(i)
for (i in c(46, 73, 100)){
Vertflow <- GW_BDGinfo[hfileDataSets[i]]
for (j in 1:dim(Vertflow)[1]) {
Vflow[,j,1] <- Vertflow[j,]
}
}
dim(Vertflow)
dim(DeepPerc)
load("FaceData.RData","MSH")
load("FaceData.RData")
dim(XY)
dim(XY)[1]
i=1
elemlist = which(MSH == i, arr.ind = TRUE)
elemlist
View(MSH)
elemlist = which(MSH[c(-1,-6)] == i, arr.ind = TRUE)
elemlist
elemlist = which(MSH[c(-1,-6)] == 2, arr.ind = TRUE)
elemlist = which(MSH[c(-1,-6)] == 3, arr.ind = TRUE)
elemlist = which(MSH[c(-1,-6)] == 4, arr.ind = TRUE)
elemlist = which(MSH[c(-1,-6)] == 10, arr.ind = TRUE)
dim(elemlist)
dim(elemlist)[1]
NsharedElem <- vector(mode = "integer", length = dim(XY)[1])
for(i in 1:dim(XY)[1]){
elemlist = which(MSH[c(-1,-6)] == i, arr.ind = TRUE)
NsharedElem[i] <- dim(elemlist)[1]
}
View(NsharedElem)
dim(MSH)
dim(MSH)[1]
# The vertical flows are written per node.
# Read the vertical flows
ids <- c(46, 73, 100)
length(ids)
dim(XY)
dim(XY)[1]
dim(Vertflow)
dim(Vertflow[i,])
dim(Vertflow)
ids <- c(46, 73, 100)
vertflowNodes <- array(dim = c(dim(XY)[1], 504, length(ids)))
for (i in 1:length(ids)) {
Vertflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(Vertflow)[1]) {
vertflowNodes[,j,i] <- Vertflow[i,]
}
}
vertflowNodes[1,2,3]
vertflowNodes[30001,2,3]
plot(vertflowNodes[30001,,1])
plot(vertflowNodes[3001,,1])
plot(vertflowNodes[3001,,2])
ids <- c(46, 73, 100)
vertflowNodes <- array(dim = c(dim(XY)[1], 504, length(ids)))
for (i in 1:length(ids)) {
Vertflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(Vertflow)[1]) {
vertflowNodes[,j,i] <- Vertflow[j,]
}
}
plot(vertflowNodes[3001,,2])
View(MSH)
t <- vertflowNodes[3001,,]
View(t)
velemflow <- matrix(data = 0, nrow = 504, ncol = 3)
View(velemflow)
3L
as.numeric(eL)
as.numeric(3L)
as.numeric(3L)/2
i=1
velemflow <- matrix(data = 0, nrow = 504, ncol = 3)
j=2
MSH[i,j] == 0
t<-vertflowNodes[MSH[i,j],,]
View(t)
t<-vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
View(t)
as.numeric(NsharedElem[MSH[i,j]])
t<-vertflowNodes[MSH[i,j],,]
View(t)
t<-vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
View(t)
MSH[i,j]
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
View(velemflow)
dim(Vflow)
j
j=3
MSH[i,j] == 0
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
j=4
MSH[i,j] == 0
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
j=5
MSH[i,j] == 0
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
plot(velemflow[,j])
plot(velemflow[,1])
plot(velemflow[,2])
plot(velemflow[,3])
for(j in 1:3){
Vflow[i,,j] <- velemflow[,j]
}
setwd(getwd())
load("FaceData.RData")
c2vsim_path <- "f:/UCDAVIS/C2VSIM_FG_OR/C2Vsim_FG_v2/C2VSimFG-BETA_PublicRelease/"
results_path <- paste0(c2vsim_path, "Results/")
preproc_path <- paste0(c2vsim_path, "Preprocessor/")
GW_BDGinfo <- h5file(name =  paste0(results_path, "C2VSimFG_GW_ZBudget.hdf"), mode = "r")
hfileGroups <- list.groups(GW_BDGinfo)
hfileDataSets <- list.datasets(GW_BDGinfo)
DeepPerc <- GW_BDGinfo[hfileDataSets[24]]
Vflow <- array(dim = c(dim(DeepPerc)[2], dim(DeepPerc)[1], 4))
for (i in 1:dim(DeepPerc)[1]) {
Vflow[,i,1] <- DeepPerc[i,]
}
ids <- c(46, 73, 100)
vertflowNodes <- array(dim = c(dim(XY)[1], 504, length(ids)))
for (i in 1:length(ids)) {
Vertflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(Vertflow)[1]) {
vertflowNodes[,j,i] <- Vertflow[j,]
}
}
NsharedElem <- vector(mode = "integer", length = dim(XY)[1])
for(i in 1:dim(XY)[1]){
elemlist = which(MSH[c(-1,-6)] == i, arr.ind = TRUE)
NsharedElem[i] <- dim(elemlist)[1]
}
for (i in 1:dim(MSH)[1]) {
velemflow <- matrix(data = 0, nrow = 504, ncol = 3)
for(j in 2:5){
if (MSH[i,j] == 0)
break
velemflow <- velemflow + vertflowNodes[MSH[i,j],,]/as.numeric(NsharedElem[MSH[i,j]])
}
for(j in 1:3){
Vflow[i,,j] <- velemflow[,j]
}
}
dim(FcLm)
dim(FcLm)[1]
## Read the faceflows
faceflows <- array(dim = c(dim(FcLm)[1], 504, 4))
## Read the faceflows
faceflows <- array(dim = c(dim(FcLm)[1], 504, 4))
55-28
82+27
ids <- c(28, 55, 82, 109)
ids
i=1
tempfflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
dim(tempfflow)
for (i in 1:length(ids)) {
tempfflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(tempfflow)[1]) {
faceflows[,j,i] <- tempfflow[j,]
}
}
dim(vflow)
dim(Vflow)
dim(Vflow)[2]
i=1
j=1
t<-Vflow[,i,j]
t<-Vflow[,i,j]
t<-Vflow[,i,j]/elemArea
View(t)
Vflow[1,i,j]/elemArea[1]
Vflow[2,i,j]/elemArea[2]
Vflow[2,i,j]
elemArea[2]
for (i in 1:dim(Vflow)[2]) {
for (j in 1:dim(Vflow)[3]) {
Vflow[,i,j] <- Vflow[,i,j]/elemArea
}
}
vflow[500,500,3]
Vflow[500,500,3]
i=1
j=1
t<-hflow[,i,j]
hflow <- array(dim = c(dim(FcLm)[1], 504, 4))
ids <- c(28, 55, 82, 109)
for (i in 1:length(ids)) {
tempfflow <- GW_BDGinfo[hfileDataSets[ids[i]]]
for (j in 1:dim(tempfflow)[1]) {
hflow[,j,i] <- tempfflow[j,]
}
}
i=1
j=1
t<-hflow[,i,j]
t<-hflow[,i,j]/faceArea
View(t)
t<-hflow[,i,j]/faceArea[,1]
View(t)
dim(hflow)[3]
View(faceArea)
for (i in 1:dim(hflow)[2]) {
for (j in 1:dim(hflow)[3]) {
hflow[,i,j] <- hflow[,i,j]/faceArea[,j]
}
}
hflow[1000,500,]
hflow[10000,300,]
